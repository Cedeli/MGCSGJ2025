[gd_scene load_steps=2 format=3 uid="uid://by88d0dhq3krs"]

[sub_resource type="CSharpScript" id="CSharpScript_15tbd"]
script/source = "using Godot;
using System;

public partial class PlayerController : Node3D, IInputReceiver
{
    [Export] public float MoveSpeed = 5.0f;
    [Export] public float JumpVelocity = 4.5f;
    [Export] public float RotationSpeed = 10.0f;
    
    [Export] private Camera3D _camera;
    [Export] private ShapeCast3D _groundCast;
    [Export] private Player _player;
    private InputManager _inputManager;
    private InputBuffer _inputBuffer;
    private Vector2 _movementInput;
    private MovementController _currentMovementController;
    
    private PlanetaryMovementController _planetaryMovement;

    public override void _Ready()
    {
        _planetaryMovement = new PlanetaryMovementController(_player, _groundCast, MoveSpeed, JumpVelocity);
        _currentMovementController = _planetaryMovement;
        
        if (_inputManager != null)
            _inputManager.MovementModeChanged += OnMovementModeChanged;
    }
    
    public override void _PhysicsProcess(double delta)
    {
        _currentMovementController.PhysicsProcess((float)delta, _movementInput);
        
        if (_inputBuffer?.HasBufferedAction(\"jump\") != true) return;
        if (_currentMovementController.TryJump() && _inputBuffer.ConsumeBufferedAction(\"jump\"))
        {
            GD.Print(\"Executed buffered jump!\");
        }
    }
    
    private void OnMovementModeChanged(InputManager.MovementMode newMode)
    {
        _currentMovementController = newMode switch
        {
            InputManager.MovementMode.Grounded => _planetaryMovement,
            _ => _planetaryMovement
        };
        
        GD.Print($\"Changed movement mode to: {newMode}\");
    }
    
    public void OnMoveInput(Vector2 direction)
    {
        _movementInput = direction;
    }
    
    public void OnLookInput(Vector2 lookDelta)
    {
        RotateY(-lookDelta.X);
        
        _camera.RotateX(-lookDelta.Y);
        _camera.Rotation = new Vector3(
            Mathf.Clamp(_camera.Rotation.X, -Mathf.Pi / 2, Mathf.Pi / 2),
            _camera.Rotation.Y,
            _camera.Rotation.Z
        );
    }
    
    public void OnJumpInput()
    {
        _currentMovementController.TryJump();
    }

    public void SetInputManager(InputManager manager)
    {
        _inputManager = manager;
    }
    
    public void SetInputBuffer(InputBuffer buffer)
    {
        _inputBuffer = buffer;
    }

    public void SetPlayer(Player player)
    {
        _player = player;
    }
}"

[node name="PlayerController" type="Node3D"]
script = SubResource("CSharpScript_15tbd")
MoveSpeed = null
JumpVelocity = null
RotationSpeed = null
